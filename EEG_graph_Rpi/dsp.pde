

//60 Hz notch filter, 4nd Order Butterworth: [b, a] = butter(2,[59.0 61.0]/(fs_Hz / 2.0), 'stop') %matlab command
//// Fs 125Hz
//b2 = new double[] { };
//a2 = new double[] { };
//// Fs 200Hz
//double[] notch_b1 = new double[] { 0.781367265547444, 1.94025704064504, 4.93220461557345, 6.56850558104815, 8.41772104541325, 6.56850558104815, 4.93220461557345, 1.94025704064504, 0.781367265547443 };
//double[] notch_a1 = new double[] { 1, 2.33037581858861, 5.54685203036105, 6.94132404071813, 8.35204672387189, 6.13649425941098,  4.33543124586087, 1.60933112466866, 0.610534807561225 };
//// Fs 250Hz
double[] notch_b1 = new double[] { 0.876853889673250,  -0.441021920093838,  3.59059660642537,  -1.33003854214373,  5.42770462264748,  -1.33003854214373,  3.59059660642537,  -0.441021920093838,  0.876853889673250 };
double[] notch_a1 = new double[] { 1,  -0.486446842673056,  3.82612175518261,  -1.37173503752132,  5.41234500239064,  -1.28453119082115,  3.35526611340481,  -0.399407853459589,  0.768872743866654 };
double[] notch_b2 = new double[] { 0.965080986344733, -0.242468320175764, 1.94539149412878, -0.242468320175764, 0.965080986344733 };
double[] notch_a2 = new double[] { 1, -0.246778261129785, 1.94417178469135, -0.238158379221743, 0.931381682126902 };
double[] notch_b3 = new double[] { 0.9324828733156563130,  -0.4684086725414172040, 3.818166364965360330, -1.412613102204007600, 5.7715989027386926903,  -1.412613102204007600,  3.818166364965360330,  -0.4684086725414172040,  0.9324828733156563130 };
double[] notch_a3 = new double[] { 1, -0.4935765902360087050, 3.952048824760664660, -1.436853823583515990, 5.767398030254125450,  -1.387333252953991680,  3.684346945874795940,  -0.4442798827173320750,  0.8691035784111363680 };
//// Fs 500Hz
//b2 = new double[] { };
//a2 = new double[] { };
//// Fs 1000Hz
//b2 = new double[] { };
//a2 = new double[] { };
//// Fs 1600Hz
//b2 = new double[] { };
//a2 = new double[] { };
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//1 Hz High pass filter, Butterworth: [b, a] 
//// Fs 250Hz
double[] hpass_b3 = new double[] {  0.9743990428350034700,  -2.92319712850501023,  2.92319712850501023,  -0.9743990428350034700  };
double[] hpass_a3 = new double[] {  1, -2.94830353131831302,  2.897599800031147590,  -0.9492890113305671560  };
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//1-40 Hz Band pass filter, Butterworth: [b, a] 
//// Fs 250Hz
double[] bpass_b6 = new double[] {  0.04548430607789819110,  0,  -0.2729058364673891290,  0,  0.682264591168472823,  0,  -0.909686121557963823,  0,  0.682264591168472911,  0,  -0.272905836467389085,  0,  0.04548430607789819110 };
double[] bpass_a6 = new double[] { 1,  -4.877694683906199200,  9.203377037389550710,  -8.205370491948222880,  3.556691227732840850,  -1.408533976409497070,  1.247579051069638290,  -0.5073101967867732040,  -0.01863307984442580610,  -0.01386249588811650830,  0.01925042094882433160,  0.004109338532502383680,  0.000397849605811694840  };
double[] bpass_b2 = new double[] {  0.2310439008769186400,  0,  -0.4620878017538372800, 0,  0.2310439008769186400  };
double[] bpass_a2 = new double[] {  1,  -2.052081027058999310,  1.20826938866221711,  -0.1978596471147962440,  0.04281766689832212870  };
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Alpha **/
//// Fs 200Hz
double[] alpha_b = new double[] { 0.000699349649904283, 0, -0.00209804894971285, 0, 0.00209804894971285, 0, -0.000699349649904283 };
double[] alpha_a = new double[] { 1, -5.37215741516161, 12.2621401138342, -15.2095187310247, 10.8104688242883, -4.17587701696822, 0.685535977284666 };

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** test **/
//// Fs 200Hz
double[] test_b = new double[] { 1, 1 };
double[] test_a = new double[] { 1, 1 };

void filterIIR(double[] filt_b, double[] filt_a, float[] raw_data, float[] filt_data) {
    int Nback = filt_b.length;
    double[] prev_y = new double[Nback];
    double[] prev_x = new double[Nback];

    //step through data points
    for (int i = 0; i < raw_data.length; i++) {
        //shift the previous outputs
        for (int j = Nback-1; j > 0; j--) {
            prev_y[j] = prev_y[j-1];
            prev_x[j] = prev_x[j-1];
        }

        //add in the new point
        prev_x[0] = raw_data[i];

        //compute the new data point
        double out = 0;
        for (int j = 0; j < Nback; j++) {
            out += filt_b[j]*prev_x[j];
            if (j > 0) {
                out -= filt_a[j]*prev_y[j];
            }
        }

        //save output value
        prev_y[0] = out;
        if(i>128){
          filt_data[i-128] = (float)out;
        }
    }
}
